openapi: 3.0.0
info:
  title: MentisSandbox API
  description: API for managing persistent sandboxes with real-time interaction capabilities.
  version: 1.0.0
servers:
  - url: /v1 # Base path

paths:
  /sandboxes:
    post:
      summary: Create a new sandbox
      description: Creates a new sandbox environment with a unique ID.
      responses:
        "200":
          description: Sandbox created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  sandbox_id:
                    type: string
                    format: uuid
                    description: The unique identifier for the created sandbox.
                  agent_url:
                    type: string
                    format: uri
                    description: URL to the agent running inside the sandbox.
  
  /sandboxes/{sandbox_id}:
    parameters:
      - name: sandbox_id
        in: path
        required: true
        description: The unique identifier of the sandbox.
        schema:
          type: string
          format: uuid
    delete:
      summary: Delete a sandbox
      description: Deletes an existing sandbox and its associated resources.
      responses:
        "200":
          description: Sandbox deleted successfully
        "404":
          description: Sandbox not found
  
  /sandboxes/{sandbox_id}/shell:
    parameters:
      - name: sandbox_id
        in: path
        required: true
        description: The unique identifier of the sandbox.
        schema:
          type: string
          format: uuid
    post:
      summary: Execute a shell command in the sandbox
      description: Runs a shell command in the sandbox and returns an action_id.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ShellCommandRequest"
      responses:
        "200":
          description: Command execution initiated
          content:
            application/json:
              schema:
                type: object
                properties:
                  action_id:
                    type: string
                    format: uuid
                    description: Unique ID for tracking the action's execution.
  
  /sandboxes/{sandbox_id}/ipython:
    parameters:
      - name: sandbox_id
        in: path
        required: true
        description: The unique identifier of the sandbox.
        schema:
          type: string
          format: uuid
    post:
      summary: Execute an IPython cell in the sandbox
      description: Runs Python code in an IPython kernel in the sandbox and returns an action_id.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IPythonCellRequest"
      responses:
        "200":
          description: IPython execution initiated
          content:
            application/json:
              schema:
                type: object
                properties:
                  action_id:
                    type: string
                    format: uuid
                    description: Unique ID for tracking the action's execution.
  
  /sandboxes/{sandbox_id}/stream:
    parameters:
      - name: sandbox_id
        in: path
        required: true
        description: The unique identifier of the sandbox.
        schema:
          type: string
          format: uuid
    get:
      summary: Stream real-time observations from a sandbox
      description: Establishes a WebSocket connection to stream real-time output and observations from a sandbox.
      responses:
        "101":
          description: WebSocket connection established
  
  /internal/observations/{sandbox_id}:
    parameters:
      - name: sandbox_id
        in: path
        required: true
        description: The unique identifier of the sandbox.
        schema:
          type: string
          format: uuid
    post:
      summary: (Internal) Receive observation from agent
      description: Internal endpoint for the agent to push observations to the runtime.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ObservationData"
      responses:
        "200":
          description: Observation received and processed

components:
  schemas:
    ShellCommandRequest:
      type: object
      required:
        - command
      properties:
        command:
          type: string
          description: The shell command to execute.
    
    IPythonCellRequest:
      type: object
      required:
        - code
      properties:
        code:
          type: string
          description: The Python code to execute in the IPython kernel.
        split_output:
          type: boolean
          default: false
          description: Whether to split stdout and stderr in the result.
    
    ObservationType:
      type: string
      enum: [start, stream, error, result, end]
      description: The type of observation being reported.
    
    ObservationData:
      type: object
      required:
        - type
        - action_id
      properties:
        type:
          $ref: "#/components/schemas/ObservationType"
        action_id:
          type: string
          format: uuid
        stream:
          type: string
          enum: [stdout, stderr]
          description: The stream type for output data.
        line:
          type: string
          description: The content of a stdout/stderr line.
        exit_code:
          type: integer
          description: The exit code of a completed action.
        error:
          type: string
          description: Error message if the action failed.
